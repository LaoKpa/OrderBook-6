package baoying.orderbook.testtool;

import baoying.orderbook.app.MatchingEngineFIXWrapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import quickfix.*;

import java.io.ByteArrayInputStream;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.IntStream;

//This is a simplified version.   
//For production code, please read common.DefaultQFJSingleSessionInitiator.
public class FirstQFJClientBatch {

    private final static Logger log = LoggerFactory.getLogger(FirstQFJClientBatch.class);

    String  getQFJConfigContent(List<String> clientCompIDs)throws Exception{

        URL qfjConfigBase = FirstQFJClientBatch.class.getClassLoader().getResource("testtool/FirstQFJClient.qfj.config_base.txt");
        byte[] baseFileBytes = Files.readAllBytes(Paths.get(qfjConfigBase.toURI()));
        StringBuilder clientSessions = new StringBuilder("#====autoGeneratedSessions====");
        for(String c: clientCompIDs){
            clientSessions.append("\n")
                    .append("[session]").append("\n")
                    .append("SenderCompID=").append(c).append("\n");
        }
        String base = new String(baseFileBytes);
        return base+clientSessions;
    }

    public void execute( String symbol,
                            String price,
                            String qty ,
                            String ordType,
                            String side,

                            String clientCompIDPrefix,
                            int fixClientNum,
                            int ratePerMinute  ) throws  Exception{


        List<String> clientIDs = new ArrayList<>();
        {
            IntStream.range(0, fixClientNum).forEach(it -> clientIDs.add(clientCompIDPrefix + String.valueOf(it)));
        }
        String qfjConfigContent = getQFJConfigContent(clientIDs);
        Application application = new FirstMessageCallback();
        SessionSettings settings = new SessionSettings(new ByteArrayInputStream(qfjConfigContent.getBytes())) ;
        MessageStoreFactory storeFactory = new FileStoreFactory(settings);
        LogFactory logFactory = new SLF4JLogFactory(settings);
        MessageFactory messageFactory = new DefaultMessageFactory();

        SocketInitiator initiator = new SocketInitiator(application, storeFactory, settings, logFactory,
                messageFactory);

        initiator.start();

        // after start, you have to wait several seconds before sending
        // messages.
        // in production code, you should check the response Logon message.
        // Refer: DefaultQFJSingSessionInitiator.java
        TimeUnit.SECONDS.sleep(5);

        final int period;
        final TimeUnit unit;
        final int msgNumPerPeriod ;
        {
            if(ratePerMinute <= 60){

                period = 60 / ratePerMinute;
                unit = TimeUnit.SECONDS;
                msgNumPerPeriod = 1;

            }else if(ratePerMinute <= 120) {

                period = 1;
                unit = TimeUnit.SECONDS;
                msgNumPerPeriod = (int)Math.round(0.49 + ratePerMinute/60);

            }else if(ratePerMinute <= 600) {

                period = 500;
                unit = TimeUnit.MILLISECONDS;
                msgNumPerPeriod = (int)Math.round(0.49 + ratePerMinute/120);

            }else{
                period = 100;
                unit = TimeUnit.MILLISECONDS;
                msgNumPerPeriod = (int)Math.round(0.49 + ratePerMinute/600);            }
        }

        ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
        AtomicInteger totalSent = new AtomicInteger(0);
        Runnable command = new Runnable() {
            @Override
            public void run(){
                try {
                    IntStream.range(0, msgNumPerPeriod).forEach(it -> {

                        int nextClientCompIDIndex = totalSent.get() % fixClientNum;
                        String clientCompID = clientIDs.get(nextClientCompIDIndex);

                        SessionID sessionID = new SessionID("FIXT.1.1", clientCompID, MatchingEngineFIXWrapper.serverCompID, "");
                        if (!Session.doesSessionExist(sessionID)) {
                            log.warn("ignore the realtime ER to client, since he:{} is not online now", clientCompID);
                            return;
                        }

                        try {
                            Message order = FIXOrderBuilder.buildNewOrderSingle(clientCompID,
                                    symbol,
                                    price,
                                    qty,
                                    ordType,
                                    side);
                            Session.sendToTarget(order, sessionID);
                        } catch (Exception e) {
                            log.error("exception while sending",e);
                        }

                        int sent = totalSent.incrementAndGet();
                        if (sent >= Integer.MAX_VALUE / 2) {
                            totalSent.getAndSet(0);
                        }
                    });

                }catch (Exception e){
                    log.error("exception while schedule sending",e);
                }
            }
        };
        long initialDelay = 0;
        executor.scheduleAtFixedRate( command,  initialDelay, period,   unit);

    }

}
